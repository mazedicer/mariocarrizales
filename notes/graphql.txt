/*Strongly-typed transport-agnostic API
Application layer query language
Query - read-only operation.
Mutation - read-write operation.
Resolver - mapping between a portion of GraphQL operation and actual backend code responsible for handling it
	(similar to a controller in a RESTful MVC backend).
Schema - defines what queries and mutations can be performed against a GraphQL server,
	what each query or mutation takes as input,
	and what each query or mutation returns as output.
Type - defines the shape of output/response data that can be returned from the GraphQL server including
	fields that are edges to other types.
Input - like a Type, but defines the shape of input data that is sent to a GraphQL server.
Scalar - primitive Type, such as a String, Int, Boolean, Float, etc.
GraphiQL - runs in the browser.

1. Build back-end server
2. Setup Express with Express-Graphql
3. Create schema file with queries and mutations
4. Implement JSON-server
5. CRUD functionality
6. Test with Graphiql
*/
npm install express express-graphql nodemon --save
npm install graphql --save
//server.js
const express=require('express');
const expressGraphQL=require('express-graphql');
const schema=require('./schema.js');
const app=express();
app.use('/graphql',expressGraphQL({
	schema:schema,
	graphiql:true
	});
app.listen(4000,()=>{
	console.log('listening port 4000');
	});
//package.json
scripts: dev:server:nodemon server.js
//schema.js
const{	
	GraphQLObjectType,
	GraphQLString,
	GraphQLInt,
	GraphQLSchema,
	GraphQLList,
	GraphQLNonNull
}=require('graphql');
//hardcoded data to serve
const customers=[
	{id:'1',name:'john',email:'email',age:20},
	{id:'2',name:'sara',email:'email',age:10},
	{id:'3',name:'man',email:'email',age:30},
];
//customer type
const CustomerType=new GraphQLObjectType({
	name:'Customer',
	fields:()=>({
		id:{type:GraphQLString},
		name:{type:GraphQLString},
		email:{type:GraphQLString},
		age:{type:GraphQLInt}
	})
});
//root query
const RootQuery=new GraphQLObjectType({
	name:'RootQueryType',
	fields:{
	customer:{
		type:CustomerType,
		args:{
			id:{type:GraphQLString}
		},
		resolve(parentValue,args){
			for(let i=0;i<customers.length;i++){	
				if(customer[i].id==args.id){	
					return customers[i];
				}
			}
		},
		customers:{
			type:new GrapQLList(CustomerType),
			resolve(parentValue,args){
				return customers;
			}
		}
	}
	}
});
module.exports=new GraphQLSchema({
	//takes root query, baseline for other queries
	//if not set, will get error: Squema query must be Object Type but got: undefined.
	query:RootQuery
});
//GraphiQL
{
	customer(id:"2"){
		name,
		email,
		age
	}
}
//returns
{
	"data":{
		"customer":{
			"name":"john",
			"email":"email",
			"age":20
		}
	}
}
//GraphiQL
{
	customers{
		id
		/*to fetch the rest
		name,
		email*/
	}
}
//returns
{
	"data":{
		"customers":[
			{"id":"1"},
			{"id":"2"},
			{"id":"3"}
		]
	}
}
