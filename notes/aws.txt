//Design for failure
/* Eliminate single points of failure such as RDS (Relational Database Service) failover. */

//Bootstraping - the process needed to get applications up and running on EC2 instance.

//Loose coupling - Decoupling individual components to allow then to scale
//and minimize dependency.

/* Optimize for performance
Serverless architecture using S3 and Cloudfront.
Lambdas to execute code.
DynamoDB and Elasticache storage options remove the need for server setup and config.
CloudWatch provides the ability to monitor application metrics and send notification alarms.
Simple Queue Service, Simple Notification Service. */

/* File system storage 
Elastic Block Storage.
Local Storage.
Can be encrypted with public access key ID and secret access key.
IAM - Identity and access management system: Service to create users and manage their permissions.
Instances can be launched in an IAM role. */

/* EC2 - Elastic Cloud Compute
Elastic IP - Not tied to a specific server, but rather to the account. No need to make DNS changes. Quickly remap and fail over to another set of servers. Web traffic routed to the new server. */

/* AMI - Amazon Machine Image - Unit of Deployment
Packaged env. cont. software stack, w/ all necessary prts to prop. setup and boot up an EC2 instance.
Maintain an Amazon Image so that you can restore and clone environments very easily across multiple availability zones.
*/

/* ELB - Elastic Load Balancing 
Balancing network traffic across multiple EC2 instances within multiple availability zones.
Handle the routing and load-balancing of HTTP, HTTPS, and TCP traffic to your EC2 instance.
Use Elastic Load Balancing to easily distribute an application across multiple resources and availability zones to ensure it remains up and running even when individual components of the application fail. */

/* CloudWatch 
provides tools to gather and graph resource metrics such as CPU utilization, Disk I/O, and network traffic. 
Alarms can be set when metrics breach certain thresholds. These alarms can then trigger actions, such as sending notifications, or starting processes to automatically handle the issue. 
Monitor custom metrics generated by custom applications running in the cloud.*/

/* EBS - Elastic Block Storage 
Storage resources that are created separately from EC2 instances. 
Unlike local instance storage, data stored on EBS volumes can live beyond the life of the instance itself. 
EBS volumes are attached to EC2 instances.
Incremental EBS snapshots to replicate data across availability zones and regions.*/

/* RDS - Relational Database System
Currently, RDS supports: MySQL, Postgres, Aurora, MariaDB, Oracle, and SQL Server.
Simplify relational database security, administration, backups, redundancy, failovers, scalability, and geographical distribution. */

/* Cloud-init to script the setup of a new server and demonstrate the use of user data and Cloud-init to bootstrap a new instance. */

/* Amazon EFS offers file storage, Amazon EBS and EC2 instance storage offers block storage, and Amazon S3 and Glacier offer object storage. S3 is an object store. In an object store, objects are stored in a flat organization which are referred to as buckets in S3.
The Glacier storage is like an extension of S3 but is intended for archiving data, for data that will be accessed very infrequently and where retrieval time of several hours is acceptable.*/

Elasitc Beanstalk

OpsWorks

CloudFOrmation and CloudFormer 

CodeDeploy

/* DynamoDB 
DynamoDB is a NoSQL, non-relational, schema-less database service that has been built from the ground up to deliver low latency, high performance, and high throughput. 
The data is stored on solid-state drives which provides very fast data access.
ELB load balancers can be configured to remember which request needs to go with which web server, always sending the same user back to the same web server. This is also referred to as sticky session management on the load balancer. If this one server fails, the user will be redirected to another server without the session state. This is where DynamoDB comes into play. It is optimized for the types of interactions needed for session management, more so than a traditional relational database management system. 
Keep the scalable server components of applications as stateless as possible, and when session state is needed, store this state in a centralized storage using DynamoDB.*/