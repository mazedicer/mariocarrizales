//build a JAVA project
apply plugin: 'java'
//build bradle
cmd>gradle build
//sourcesets project structure stored in src folder rather than src/main/java
apply plugin: 'java'
sourceSets {
   main {
      java {
         srcDir 'src'
      }
   }
	
   test {
      java {
         srcDir 'test'
      }
   }
}
/*multi-project-build
Such builds come in all shapes and sizes, but they do have some common characteristics 
A settings.gradle file in the root or master directory of the project.
A build.gradle file in the root or master directory.
Child directories that have their own *.gradle build files (some multi-project builds may omit child project build scripts).*/


/* Projects
library JAR, web app, made up of different tasks(pieces of work) compiling classes, creating JAR, generating javadoc,publishing archives to repo.
Uses Groovy language
*/

/* Dependencies
required JAR file, JDBC JAR, Hibernate JARs
e.g.*/

repositories {
   mavenCentral()
}

dependencies {
   compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
   testCompile group: 'junit', name: 'junit', version: '4.+'
}

/*plugins
set of tasks that can:
extend gradle
configure project
apply specific configurations*/
Project.apply()
//or
apply plugin: JavaPlugin
//in build.gradle
plugins {
   id 'java'
}
//community plugin
plugins {
   id "com.jfrog.bintray" version "0.4.1"
}
//writing custom plugin
apply plugin: GreetingPlugin
class GreetingPlugin implements Plugin<Project> {
   void apply(Project project) {
      project.task('hello') << {
         println "Hello from the GreetingPlugin"
      }
   }
}
//to run
cmd>gradle -q hello
//plugins add support for various languages which can be compiled and executed in the JVM


//build.gradle file
//syntax has different variations
task hello{
    doLast{
        println 'hello'
    }
}
//or
task('hello') << {
   println "tutorialspoint"
}
//or
tasks.create(name: 'hello') << {
   println "tutorialspoint"
}
//or
task (hello) << {
   println "tutorialspoint"
}
//to execute:
cmd> gradle -q hello

//Dependable tasks
task taskX << {
   println 'taskX'
}
task taskY(dependsOn: 'taskX') << {
   println "taskY"
}
//or
task taskY << {
   println 'taskY'
}
task taskX << {
   println 'taskX'
}
taskY.dependsOn taskX
//or
task taskX << {
   println 'taskX'
}
taskX.dependsOn {
   tasks.findAll { 
      task â†’ task.name.startsWith('lib') 
   }
}
task lib1 << {
   println 'lib1'
}
task lib2 << {
   println 'lib2'
}
task notALib << {
   println 'notALib'
}

//multiple tasks
task task1 << {
   println 'compiling source'
}

task task2(dependsOn: task1) << {
   println 'compiling unit tests'
}

task task3(dependsOn: [task1, task2]) << {
   println 'running unit tests'
}

task task4(dependsOn: [task1, task3]) << {
   println 'building the distribution'
}
cmd>gradle task4 test



