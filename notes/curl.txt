//https://curl.haxx.se/docs/httpscripting.html
/*The client, curl, sends a HTTP request. 
The request contains a method (like GET, POST, HEAD etc),
 a number of request headers and sometimes a request body.
 The HTTP server responds with a status line
 (indicating if things went well), response headers and most 
often also a response body. 
The "body" part is the plain data you requested, 
like the actual HTML or the image etc.*/
/*Then --trace and --trace-ascii offer even more details as they 
show EVERYTHING curl sends and receives. Use it like this:*/
 curl --trace-ascii debugdump.txt http://www.example.com/
 
 /* see what's taking the time*/
 curl --trace-ascii d.txt --trace-time http://example.com/
 
 /*see the response
 By default curl sends the response to stdout. 
You need to redirect it somewhere to avoid that, 
most often that is done with -o or -O*/

/* host
The host name is usually resolved using 
DNS or your /etc/hosts file to an IP address and that's
 what curl will communicate with. 
 you can point to a different IP address for a host name than
 what would otherwise be used, by using curl's --resolve option:*/
 curl --resolve www.example.org:80:127.0.0.1 http://www.example.org/
 
 /*ports
 Each protocol curl supports operates on a default port number,
 be it over TCP or in some cases UDP. Normally you don't have to 
take that into consideration, but at times you run test servers on 
other ports or similar. Sometimes you may use a local proxy,
 and then you may need to specify that proxy's port number 
separately for what curl needs to connect to locally. 
Like when using a HTTP proxy on port 4321:*/
 curl --proxy http://proxy.example.org:4321 http://remote.example.org/
 
 /* username & password
 You can opt to either insert the user and password in
 the URL or you can provide them separately:*/
 curl http://user:password@example.org/
//or
 curl -u user:password http://example.org/
 
 /*get
 All HTTP replies contain a set of response headers that are
 normally hidden, use curl's --include (-i) option to display them 
as well as the rest of the document.*/
curl http://example.org

/*head
You can ask the remote server for ONLY the headers by using the
 --head (-I) option which will make curl issue a HEAD request.
 In some special cases servers deny the HEAD method*/
 
 /* --data to POST to the URL, using multiple URLs means that 
you send that same POST to all the given URLs.
Example, send two POSTs:*/
curl --data name=curl http://url1.example.com http://url2.example.com

/*--next on the command line, it'll sort of reset the method and 
the POST data and allow a new set.
 To send first a HEAD and then a GET:*/
curl -I http://example.com --next http://example.com
/*To first send a POST and then a GET:*/
curl -d score=10 http://example.com/post.cgi --next http://example.com/results.html

/*GET forms
after user fills in the input value of a get form with birthyear input,
and press submit button with value OK.
To make curl do the GET form post for you, 
just enter the expected created URL:*/
 curl "http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK"
 
/*POST forms
The HTTP protocol then offers the POST method.
 This way the client sends the data separated from the
 URL and thus you won't see any of it in the URL address field.
The form would look very similar to the previous one.
Any hidden fields are sent just as regular fields:*/
 <form method="POST" action="junk.cgi">
 <input type=text name="birthyear">
 <input type=submit name=press value=" OK ">
 </form>
/*And to use curl to post this form with the same data filled in as before,
 we could do it like:*/
 curl --data "birthyear=1905&press=%20OK%20"  http://www.example.com/when.cgi
 
/*Uses the Content-Type application/x-www-form-urlencoded 
and is the most widely used POST kind. The data you send to the 
server MUST already be properly encoded, curl will not do that for you.
 For example, if you want the data to contain a space, 
you need to replace that space with %20 etc. Failing to comply with 
this will most likely cause your data to be received wrongly and 
messed up. Recent curl versions can in fact url-encode POST data 
for you, like this:*/
 curl --data-urlencode "name=I am Daniel" http://www.example.com

/*If you repeat --data several times on the command line,
 curl will concatenate all the given data pieces - and put a '&' symbol 
between each data segment.*/

/*uploading*/
<form method="POST" enctype='multipart/form-data' action="upload.cgi">
 <input type=file name=upload>
 <input type=submit name=press value="OK">
</form>

/*This clearly shows that the Content-Type about to be sent is 
multipart/form-data.To post to a form like this with curl, you enter 
a command line like:*/
 curl --form upload=@localfilename --form press=OK [URL]
 
/* PUT uploading
 Put a file to a HTTP server with curl:*/
 curl --upload-file uploadfile http://www.example.com/receive.cgi

