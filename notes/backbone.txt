/* Modules 
a way to refer to javascript files.
specific block of code pertaining to a component.
*/

/* Backbone has two dependencies: core jQuery library, and core underscore library.
The order is important: jQuery, underscore, and then backbone. */

/* BackboneJS provides various building blocks such as models, views, events, routers and collections for assembling the client side web applications.

When a model changes, it automatically updates the HTML of your application. */

<div id="container"></div>

var AppView = Backbone.View.extend({
	//el - stands for element. Every view has an element associated with HTML content
	//will be rendered.
	el: '#container',
	//first function call when this view is instantiated.
	initialize: function(){
		this.render();
	},
	// $el - cached jQuery object(el), in which you can use jQuery functions
	// to push content
	render: function(){
		this.$el.html( "<h1>Hello Man!</h1>" );
	}
});
var appView = new AppView();

//structure arrows: up,down,right,left: alt: 30,31,16,17

/* Router --[HTTP Request]--► View 
								|
								|
								▼
							  Events 
			  model ----------|    |---------► Collection 
				▲									▲
				|									|
				|									|
				 ----------► Data Source ◄----------

*/

//HTTP Request come from the router 

/*Router 
Routes the client side and connects them to actions and events using URLs*/

/*View 
Displays the response for the user request by the router.
Don't contain HTML.
Used to reflect how your data model looks like.
Updated independently when the model changes.
Logical chunk of UI in the DOM.*/

/*Model
A Model takes the HTTP request from the Events passed by the View using the Router and synchronizes the data from the database and sends the response back to the client.*/

/*Collection 
Set of models which binds events, when the model has been modified in the collection.
Contains a list of models that can be processed in the loop and supports sorting and filtering.
When creating a collection, we can define what type of model that colleciton is going to have
along with the instance of properties. Any event triggered on a model will also trigger on the colleciton in the model.

It also takes the request from the view, bind events and synchronizes the data with the requested data and sends the response back to the HTTP client.*/

/*Events 
on - binds event to an object and executes a callback whenever an event is fired.

off - removes callback functions or all events from an object.

trigger - invokes the callback functions for the given events.

once - extends the backbone.Model class while creating your own backbone Model.

listenTo - informs one object to listen to an event on another object.

stopListening - can be used to stop listening to events on the other objects.

listenToOnce - causes the listenTo occur only once before the callback function is being removed.*/

//Built-in Events 
//adding model to a collection 
"add"( model, collection, options )
//remove model from a collection 
"remove"( model, collection, options )
//reset the collection content 
"reset"( collection, options )
//resort collection 
"sort"( collection, options )
//change a model's attributes 
"change"( model, options )
//when there is an update in an attribute 
"change:[attribute]"( model, value, options )
//fires when the model is destroyed
"destroy"( model, collection, options )
//used when a model or a collection starts requesting to the server
"request"( model_or_collection, xhr, options )
//used when a model or collection is synced successfully with the server 
"sync"( model_or_collection, resp, options )
//activates when there is an error in requesting to the server 
"error"( model_or_collection, resp, options )
//when there is a fail in model validation 
"invalid"( model, error, options )
//when there is a specific route match, this event can be used 
"route:[name]"( params )
//when there is a match with any route 
"route"( route, params )
//used by history when there is a match with any route 
"route"( router, route, params )		
//fires for all the triggered events by the passing event name as the first argument 
"all"

//////////////////////////////////////////////////////////////////////////////////////
/* Models 
contain dynamic data and its logic: Conversions, validations, computed properties, and access control fall under the Model category. */
//singleXModel.js
var app = app || {};
app.singleX = Backbone.Model.extend({
	defaults: {
		color: "red",
		img: "images/red.jpg"
	},
	//runs on instantiation and changes 
	initialize: function(){
		//use get() function 
		this.get("name");
		this.get("price");
		this.on("change", function(){
			//fire this code when any changes occur 
		});
		this.on("change:price", function(){
			//fire this code when price property changes 
		});
	}
	
});

//creating a collection 
//allXsCollection.js 
var app = app || {};
app.XsCollection = Backbone.Collection.extend({
	model: app.singleX;
});

//xApp.js 
var redX = new app.singleX({
	name: "rex x",
	price: 5,
	color: "red",
	link: "redX"
});
//make a change/add with set() and to fire the this.on code of this model class 
redX.set( "price", 20 );
//converts to json like 
console.log( redX.toJSON() );
//add to collection 
var xGroup = new app.XsCollection([
	redX, blueX, greenX, //...
]);
//convert collection to json like 
console.log( xGroup.toJSON() );
//remove redX from collection 
xGroup.remove( redX );
//add redX to collection 
xGroup.add( redX );
//adding the collection to the view 
var xGroupView = new app.allXView({ collection: xGroup });
//jQuery is targeting allXs element in index.html
$( "#allX" ).html( xGroupView.render().el );

//creating views 
//singleXView.js
var app = app || {};
//the view of a single model view
app.singleXView = Backbone.View.extend({
	tagName: "article",
	className: "xListItem",
	//target the xElement at index.html 
	template: _.template( $( "#xElement" ).html() ),
	//render builds the element with the above attributes 
	render: function(){
		var xTemplate = this.template( this.model.toJSON() );
		this.$el.html( xTemplate );
		return this;
	}
});
//create a template 
//index.html 
<script id="xElement" type="text/template">
	//lodash syntax, 
	//the hash creates a routerable link 
	<a href="#<%= link %>">
		<img src="<% img %>" alt="%= name %>" />
	</a>
	<ul>
		<li>Name: <%= name %></li>
		<li>Price: <%= price %></li>
		<li>Color: <%= color %></li>
	</ul>
//allXView.js 
var app = app || {};
//the view for all the Xs 
app.allXView = Backbone.View.extend({
	tagName: "section",
	//
	render: function(){
		this.collection.each( this.addX, this );
		// returning this allows chaining with other render methods 
		return this;
	},
	addX: function( X ){
		var XView = new app.singleXView( { model: X } );
		//$el is jQuery reference to the element in this view, which is the section tag.
		this.$el.append( XView.render().el );
	}
});

//extend - extends the backbone.Model class while creating your own backbone Model 
 
//initialize - when model instance created, the class' constructor gets called. Watches for changes 

//set( model_property, value ) - sets the value of an attribute in the model 
 
//get( model_property ) - gets ....
 
//escape - like get but returns HTML-escaped version
 
//has - returns true if attribute not empty, non-null, non-undefined 
 
//unset - removes an attribute from a model 
 
//clear - removes all attributes including id from model 
 
//id - to identify model entity
 
//idAttribute - Defines a model's unique identifier which contains the name of the member of the class which will be used as id.

//cid - auto generated client id which uniquely identifies the model on the client 
 
//attributes - attributes defines property of a model 
 
//changed - Changes all the attributes that have changed after setting the attributes using the set() method

//defaults - Sets a default value to a model, that means if the user doesn't specify any data, the model won't fall with an empty property

//toJSON - Returns a copy of the attributes as an object for JSON stringification.

//sync - to communicate with the server and to represent the state of a model.
 
//fetch - Accept the data from the server by delegating sync() method in the model
 
//save - Saves the data of the model by delegating to sync() method which reads and saves the model every time when a Backbone calls it
 
//destroy - Destroys or removes the model from the server by using the Backbone.sync method which delegates the HTTP "delete" request.
 
//validate - If the input is invalid, it returns a specified error message or if the input is valid, it doesn't specify anything and simply displays the result
 
//validationError - displays the validation error, if the validation fails or after the invalid event is triggered.

//isValid - checks the model state by using the validate() method and also checks validations for each attribute.

//url - used for the instance of the model and returns the url to where the model's resource is located
 
//urlRoot - Enables the url function by using the model id to generate the URL
 
//parse - Returns the model's data by passing through the response object and represents the data in the JSON format
 
//clone - create a deep copy of a model or to copy one model object to another object
 
//hasChanged - Returns true, if the attribute gets changed since the last set

//isNew - Determines whether the model is a new or an existing one.
 
//changedAttributes - It returns the model's attributes that have changed since the last set or else becomes false, if there are no attributes

//previous - determines the previous value of the changed attribute
 
//previousAttributes - Return a copy of the model's previous attributes. Useful for getting a diff between versions of a model, or getting back to a valid state after an error occurs


//underscore methods
//_.keys( object ) - to access the object's enumerable properties 

//_.values( object ) - to get values of object's properties

//describes the object's properties in terms of key value pairs
_.pairs( object )
//returns the copy of object, in which keys have become the values and vice versa
_invert( object )
//returns the copy of object and indicates which keys to pick up
_.pick( object, *keys )
//returns the copy of object and indicates which keys to omit
_.omit( object, *keys )

///////////////////////////////////////////////////////////////////////////////////
/* Collections 
Ordered sets of models.
Extend the collection class to create your own collection.
Any event triggered on a model in a collection will also be triggered on the collection allowing you to listen for changes to specific attributes in any model in a collection.*/
//Extends the backbone's collection class to create a collection
extend 
//To specify the model class, we need to override the model property of the collection class
model
//When a model instance is created, it is invoked by defining the initialize function when the collection is created.
initialize
//Array of models which are created inside the collections
models 
//Returns the copy of the attributes of a model using the JSON format in the collection
toJSON 
//represents the state of the model and uses the Backbone.sync to display the state of the collection
sync 
//Add a model or array of models to the collection
add 
//Removes a model or array of models from the collection
remove 
//resets the collection and populates with new array of models or will empty the entire collection
reset 
//used to update the collection with a set of items in a model. If any new model is found, the items will be added to that model
set 
//used to retrieve the model from a collection by using the id or cid
get 
//Retrieve the model from a collection by using specified index
at 
//similar to the add() method which takes the array of models and pushes the models to the collection
push 
//similar to the remove() method which takes the array of models and removes the models from the collection
pop 
//Add a specified model at the beginning of a collection
unshift 
//removes the first item from the collection
shift 
//Displays the shallow copy of the elements from the collection model.
slice 
//Counts the number of models in the collection
length 
//sort the items in the collection
comparator 
//Sorts the items in the collection and uses comparator property in order to sort the items
sort 
//Retrieves the attributes from the model in the collection
pluck 
//used to display the model by using the matched attribute in the collection
where 
//returns the model, that matches the specified attribute in the collection
findWhere
//creates an instance of the collection and returns where resources are located
url 
//Returns the collection's data by passing through the response object and represents the data in JSON format
parse 
//returns the shallow copy of the specified object.
clone 
//extracts the data from the model in the collection using the sync method
fetch 
//creates a new instance of the model in the collection
create 

//underscore methods 
//Iterates each of the elements in the collection using the iteratee function
_.each( list, iteratee, [context] )
//maps each value and displays them in a new array of values using the iteratee function
_.map( list, iteratee, [context] )
//reduces the list of values into a single value and it also known as inject and foldl
_.reduce( list, iteratee, memo, [context] )
//the right associative version of reduce
_.reduceRight( list, iteratee, memo, [context] )
//finds each value and returns the first one which passes the predicate or test
_.find( list, predicate, [context] )
//filters each value and returns the array of values which passes the predicate or test
_.filter( list, predicate, [context] )
//returns the rejected elements in the list which do not pass the predicted values
_.reject( list, predicate, [context] )
//returns true, if elements in the list pass the predicted values
_.every( list, predicate, [context] )
//returns true, if elements in the list pass the predicted values
_.some( list, predicate, [context] )
//returns true, if a value is present in the list
_.contains( list, value, [fromIndex])
//invokes the method name using methodName() on each value in the list
_.invoke( list, methodName, *arguments )
//specifies the maximum value in the list
_.max( list, [iteratee], [context] )
//specifies the minimum value in the list
_.min( list, [iteratee], [context] )
//returns the sorted elements in the ascending order by using iteratee in the list
_.sortBy( list, [iteratee], [context] )
//divides the collection values into the sets, grouped by using the iteratee in the list
_.groupBy( list, [iteratee], [context] )
//returns the shuffled copy of the list
_.shuffle( list )
//defines an array of the list
_.toArray( list )
//defines the number of values in the list
_.size( list )
//specifies the first element of the array in the list
_.first( array, [n] )
//returns everything, but specifies the last entry of the array in the list
_.initial( array, [n] )
//specifies the last element of the array in the list
_.last( array, [n] )
//defines the remaining elements in the array
_.rest( array, [index] )
//returns the values of all instances which are removed in the list.
_.without( array, *values )
//returns the value if it is found at a specified index or returns -1, if it is not found.
_.indexOf( array, value, [isSorted] )
//returns the last occurrence of the value in the array or returns -1, if it is not found
_.indexOf( array, value, [fromIndex] )
//returns true if there are no values in the list
_.isEmpty( object )
//returns a wrapped object 
_.chain( obj )

////////////////////////////////////////////////////////////////////////////////////
/* Router 
Required for links, bookmarks, and share URL locations in the app */
//extends the backbone's router class
extend 
//defines the URL representation of applications objects
routes
//creates a new constructor for the router instantiation
initialize 
//creates a route for the router 
route 
//used to update the URL in the applications 
navigate 
//used when a route matches its corresponding callback 
execute 

////////////////////////////////////////////////////////////////////////////////////
/* History 
keeps track of history, matches the appropriate route, fires callbacks to handle events and enables the routing in the application*/
//start - starts listening to routes and manages the history for bookmarkable URLs 
// options include pushState, hasChanged
Backbone.history.start( options )

//'Router' is a name of the router class 
var Router = Backbone.Router.extend({
	//the 'routes' maps URLs with parameters to functions on your router 
	routes: {
		"myroute": "myFunction"
	},
	//the function 'myFunction' defines the links for the route on the browser
	myFunction: function( myroute ){
		document.write( myroute );
	}
});
//'router' is an instance of the Router 
var router = new Router();
//start listening to the routes and manages the history for bookmarkable URLs 
Backbone.history.start();

<body>
	<a href="#route1">Route1</a>
	<a href="#route2">Route2</a>
	<a href="#route3">Route3</a>
</body>

//output: src/history/start.htm#route1, src/history/start.htm#route2, ...

////////////////////////////////////////////////////////////////////////////////////
/* Sync */
//Backbone.sync - Persist the state of the model to the server

//Backbone.ajax - defines custom ajax function

//.emulateHTTP -  If your web server does not support REST or HTTP approach, then turn on the Backbone.emulateHTTP 

//.emulateJSON - used to handle the requests encoded with application/json by setting the method to true 


////////////////////////////////////////////////////////////////////////////////////
/* View 
reflect "how your data model looks like". They represent the model's data to the user. They provide the idea behind the presentation of the model's data to the user. It handles the user input events, binds events and methods, renders model or collection and interacts with the user
*/
//extend - extends the Backbone.View class to create a custom view class.

//initialize - instantiates the view by using the new keyword.

//el - defines which element to be used as the view reference.

//$el - represents the jQuery object for the view's element.

//setElement - specifies the existing DOM element to a different DOM element.

//attributes - They can be used as DOM element attributes on the view class.

//$(jQuery) - It is used as a selector that contains the $ function and runs queries within the view's element.

//template - While rendering the view, template creates reusable copies of markup and provides access to instance data.

//render - contains the logic for rendering a template.

//remove - Removes a view from the DOM.

//delegateEvents - Binds elements to the specified DOM elements with callback methods to handle events.

//undelegateEvents - It removes delegate events from the view.

////////////////////////////////////////////////////////////////////////////////////
/* Utility
The utility class defines a set of methods used for implementing the backbone utility*/

//Backbone.noConflict - displays the original value of Backbone object and allows to store reference to a backbone.

//Backbone.$ - allows Backbone to use particular object as DOM library.

