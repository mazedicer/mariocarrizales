//config 
git config --global user.name "Mario Carrizales"
git config --global user.email "pcdoctormario@gmail.com"

//setup git project
	git init  

//show all commands
	git

//download repository
	git clone <URL>
	
//show commited, untracked files, not staged, deleted
	git status

//show commit messages
	git log 

//add changes to staging including deleted files 
	git add <filename>
		. (period) all
		-A all 
		--all 

//locking changes into repository
	git commit -m "message"		
		
//revert / undelete
	git checkout <filename>
	
//unstage working on files 
	git reset HEAD <filename>

//Lock commit
hit [ESC] :(colon) wq [ENTER]

////////////////////////////////////////////////////////////////////////
//BRANCHES

//show branches 
	git branch

//switch branches 
	git checkout <branch name>

//add branch/create save point
	git branch <branch name>

//add branch and switch to it
    git branch -b <branch name>

//work with older commit points
	>copy commit hash
	git checkout <commit hash>

//save alternate version into a branch 
	git branch <new-branch-name> commit hash 
	
//merge branch x changes into master branch 
    git checkout master
	git merge <branch-name> e.g. hotfix

//change branch name 
	git branch -m <branch-name> <new-branch-name>
	//if current branch 
	git branch -m <newname>

//delete branch 
	git branch -D <branch>

//merge error
    //from same file on both branches
    //modify both files with code you want,
    git add <file>, then merge again
    
    
////////////////////////////////////////////////////////////////////////
//REMOTE

git remote add <name> <url>

git fetch <remote> <branch>

git pull <remote>
    //merge remote branch to local

git push <remote> <branch>
    //ommit <branch> to commit master

////////////////////////////////////////////////////////////////////////
//UNDO

git revert | <commit>
    //undoes all changes made

git reset | <file>
    //remove <file> from stage
    
git clean | -n | -f
    //show wich files to remove from working directory
    
////////////////////////////////////////////////////////////////////////
//REWRITE

git commit --amend
    //replace last commit with stage
    //add new -m message

git rebase | <base>
    //rebase current branch onto <base>
    //a commit ID, branch name, tag, or relative reference to HEAD

git reflog | --all
    //show log of changes to the local repo's HEAD

/* If you already have any x folders in your git index which you no longer wish to track. Git won't stop tracking paths that are already being tracked just because the now match a new .gitignore pattern. Execute a folder remove (rm) from index only (--cached) recursivelly (-r). */
git rm -r --cached <x-folder>
	
////////////////////////////////////////////////////////
//GITHUB
////////////////////////////////////////////////////////
// .md : markdown file extension 
// .gitignore file : ignore directories
// never upload node modules

//cloning github repository
	//> copy cloning url
	//> open gitbash terminal
	//> check working directory
		cmd>pwd
		cmd>git clone <cloning url>
	// >install dependencies from package.json file since required node modules are not cloned 
		cmd>npm install 

//cloning single branch from Github repo 
	// >copy cloning url 
	git clone <cloning url>
	npm install 
	// >show branch info 
		git branch -a 
	// >pull the branch you want 
		git checkout -b <branch-name> origin/<branch-name>

//cloning all branches 
	mkdir project-name 
	cd project-name 
	git clone --mirror <clone-url> .git 
	git config --bool core.bare false
	//throw away all staged, unstaged changes and make exactly as origin/master 
	git reset --hard 
	
//github branch as template
	git clone -b <branch-name> <git-clone-url>
	// > remove the .git to start from scratch
		rm -dfr .git
	// > start new repository
		git init 
		git add .
		git commit -m "commit 1"


//download from github 
	cmd> git pull
	
//uploading master branch to github
//Sets the new remote
git remote add origin <remote repository URL>
//Verifies the new remote URL
git remote -v
//Pushes the changes in your local repository up to the remote repository you specified as the origin
git push origin master 
	



	



