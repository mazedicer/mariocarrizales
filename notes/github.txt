/////////////////////////////////////////////////////////////////////
//DAILY GIT WORKFLOW
/////////////////////////////////////////////////////////////////////

//pull all the changes from the remote repo
git pull <remote repo>

//create a new branch for your bug/feature/issue
git checkout -b <new-branch-name>
    /* WORK HERE
        //add changes to stage
        git add .
        //see changes
        git status | git diff <masterbranch_path> <remotebranch_path>

//make the commit with "label details" e.g. "header added logo etc.."
git commit -m "label detailed message here"

//switch back to master branch
git checkout master

//update the master branch with all your changes
git merge <working-branch-name>

//send your changes up to the remote repo
git push

/////////////////////////////////////////////////////////////////////
//config 
/////////////////////////////////////////////////////////////////////

git config --global user.name "Mario Carrizales"
git config --global user.email "pcdoctormario@gmail.com"

//setup git project
	git init  

//show all commands
	git

//download repository
	git clone <URL>
	
//show commited, untracked files, not staged, deleted
	git status

//show commit messages
	git log 

//add changes to staging including deleted files 
	git add <filename>
		. (period) all
		-A all 
		--all 

//locking changes into repository
	git commit -m "message"		
		
//revert / undelete
	git checkout <filename>
	
//unstage working on files 
	git reset HEAD <filename>

//Lock commit
hit [ESC] :(colon) wq [ENTER]

////////////////////////////////////////////////////////////////////////
//BRANCHES

//show branches 
	git branch

//switch branches 
	git checkout <branch name>

//add branch/create save point
	git branch <branch name>

//add branch and switch to it
    git branch -b <branch name>

//work with older commit points
	git log 
	//copy commit hash
	git checkout <commit hash>

//save alternate version into a branch 
	git branch <new-branch-name> commit hash 
	
//merge branch x changes into master branch 
    git checkout master
	git merge <branch-name> e.g. hotfix

//change branch name 
	git branch -m <branch-name> <new-branch-name>
	//if current branch 
	git branch -m <newname>

//delete branch 
	git branch -D <branch>

//merge error
    //from same file on both branches
    //modify both files with code you want,
    git add <file>, then merge again

//merge a file from another branch into current branch 
	//create a new branch
	git checkout -b fixed_x
	//pull the remote branch into current branch 
	git pull origin <remote_branch>
	//switch to working branch 
	git checkout working 
	//copy the file from fixed_x branch into working branch 
	git checkout fixed_x -- <path/to/file>
  
//delete local branch 
	git branch -d feature/login
  
////////////////////////////////////////////////////////////////////////
//REMOTE

git remote add <name> <url>

git fetch <remote> <branch>

git pull <remote>
    //merge remote branch to local

git push <remote> <branch>
    //ommit <branch> to commit master
	
git push <remote> <local_branch>:<new_or_other_branch>
	//e.g. git push origin master:new_test_branch

git push origin --delete feature/login
	//delete remote branch 
	
////////////////////////////////////////////////////////////////////////
//UNDO

git revert <commit>
    //undoes all changes made

git reset | <file> 
    //remove <file> from stage
	
git reset --hard <commit hash>
	//bring branch to previous commit point 
	//e.g. git reset --hard 1587bba
    
git clean | -n | -f
    //show which files to remove from working directory
    
////////////////////////////////////////////////////////////////////////
//REWRITE

git commit --amend
    //replace last commit with stage
    //add new -m message

git rebase | <base>
    //rebase current branch onto <base>
    //a commit ID, branch name, tag, or relative reference to HEAD

git reflog | --all
    //show log of changes to the local repo's HEAD

/* If you already have any x folders in your git index which you no longer wish to track. 
Git won't stop tracking paths that are already being tracked just because the now match a new .gitignore pattern. 
Execute a folder remove (rm) from index only (--cached) recursivelly (-r). */
git rm -r --cached <x-folder>

////////////////////////////////////////////////////////////////////////
//STASH

git stash 
	//you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes

git stash list
	//To see which stashes you’ve stored
 
git stash apply
	//You can reapply the one you just stashed

git stash apply stash@{2}
	//If you want to apply one of the older stashes

git stash drop stash@{0}
	//remove stash 
	
git stash save "description"
	//name a stash 
	
////////////////////////////////////////////////////////
//GITHUB
////////////////////////////////////////////////////////
// .md : markdown file extension 
// .gitignore file : ignore directories
// never upload node modules

//cloning github repository
	//> copy cloning url
	//> open gitbash terminal
	//> check working directory
		cmd>pwd
		cmd>git clone <cloning url>
	// >install dependencies from package.json file since required node modules are not cloned 
		cmd>npm install 

//cloning single branch from Github repo 
	// >copy cloning url 
	git clone <cloning url>
	npm install 
	// >show branch info 
		git branch -a 
	// >pull the branch you want 
		git checkout -b <branch-name> origin/<branch-name>

//cloning all branches 
	mkdir project-name 
	cd project-name 
	git clone --mirror <clone-url> .git 
	git config --bool core.bare false
	//throw away all staged, unstaged changes and make exactly as origin/master 
	git reset --hard 
	
//github branch as template
	git clone -b <branch-name> <git-clone-url>
	// > remove the .git to start from scratch
		rm -dfr .git
	// > start new repository
		git init 
		git add .
		git commit -m "commit 1"


//download from github 
	cmd> git pull
	
//uploading master branch to github
//Sets the new remote
git remote add origin <remote repository URL>

//Verifies the new remote URL
git remote -v

//Pushes the changes in your local repository up to the remote repository you specified as the origin
git push origin master 
	



	



