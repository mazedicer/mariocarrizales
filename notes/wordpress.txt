<?php
// https://code.tutsplus.com/tutorials/the-wordpress-settings-api-part-4-on-theme-options--wp-24902
//////////////////////////////////////////////////
CUSTOM ADMIN MENUS
/////////////////////////////////////////////////
/**
 * Adds a new top-level menu to the bottom of the WordPress administration menu.
 */ 
function sandbox_create_menu_page() {
 
    add_menu_page(
        'Sandbox Options',          // The title to be displayed on the corresponding page for this menu
        'Sandbox',                  // The text to be displayed for this actual menu item
        'administrator',            // Which type of users can see this menu
        'sandbox',                  // The unique ID - that is, the slug - for this menu item
        'sandbox_menu_page_display',// The name of the function to call when rendering the menu for this page
        ''
    );
 
} // end sandbox_create_menu_page
add_action('admin_menu', 'sandbox_create_menu_page');
 
/**
 * Renders the basic display of the menu page for the theme.
 */
function sandbox_menu_page_display() {
     
    // Create a header in the default WordPress 'wrap' container
    $html = '<div class="wrap">';
        $html .= '<h2>Sandbox</h2>';
    $html .= '</div>';
     
    // Send the markup to the browser
    echo $html;
     
} // end sandbox_menu_page_display
//////////////////////////////////////////////////
CUSTOM ADMIN SUB MENUS
/////////////////////////////////////////////////
add_submenu_page(
    'sandbox',                  // Register this submenu with the menu defined above
    'Sandbox Options',          // The text to the display in the browser when this menu item is active
    'Options',                  // The text for this menu item
    'administrator',            // Which type of users can see this menu
    'sandbox_options',          // The unique ID - the slug - for this menu item
    'sandbox_options_display'   // The function used to render the menu for this page to the screen
);
function sandbox_options_display() {
    // Create a header in the default WordPress 'wrap' container
    $html = '<div class="wrap">';
        $html .= '<h2>Sandbox Options</h2>';
    $html .= '</div>';
    // Send the markup to the browser
    echo $html;  
} // end sandbox_options_display
//////////////////////////////////////////////////
Plugin Pages
//////////////////////////////////////////////////
/*Refresh your WordPress Dashboard, hover over the 
Plugins menu and you should notice a new menu item.*/
/** This function introduces a single theme menu option into the WordPress 'Plugins' menu. */
function sandbox_example_plugin_menu() {
    add_plugins_page(
        'Sandbox Plugin',           // The title to be displayed in the browser window for this page.
        'Sandbox Plugin',           // The text to be displayed for this menu item
        'administrator',            // Which type of users can see this menu item
        'sandbox_plugin_options',   // The unique ID - that is, the slug - for this menu item
        'sandbox_plugin_display'    // The name of the function to call when rendering the page for this menu
    );
} // end sandbox_example_theme_menu
add_action('admin_menu', 'sandbox_example_plugin_menu');
/**Renders a simple page to display for the theme menu defined above. */
function sandbox_plugin_display() {
    // Create a header in the default WordPress 'wrap' container
    $html = '<div class="wrap">';
        $html .= '<h2>Sandbox Plugin Options</h2>';
        $html .= '<p class="description">There are currently no options. This is just for demo purposes.</p>';
    $html .= '</div>';     
    // Send the markup to the browser
    echo $html;  
} // end sandbox_plugin_display
//////////////////////////////////////////////////
Theme Pages
//////////////////////////////////////////////////
/*refresh the WordPress Dashboard, hover over the
 Appearance menu and you should see your new menu item. Simple!*/
 /** This function introduces a single theme menu option into the WordPress 'Appearance'menu.
 */
function sandbox_example_theme_menu() {
    add_theme_page(
        'Sandbox Theme',            // The title to be displayed in the browser window for this page.
        'Sandbox Theme',            // The text to be displayed for this menu item
        'administrator',            // Which type of users can see this menu item
        'sandbox_theme_options',    // The unique ID - that is, the slug - for this menu item
        'sandbox_theme_display'     // The name of the function to call when rendering the page for this menu
    );
} // end sandbox_example_theme_menu
add_action('admin_menu', 'sandbox_example_theme_menu');
/** Renders a simple page to display for the theme menu defined above.
 */
function sandbox_theme_display() {
    // Create a header in the default WordPress 'wrap' container
    $html = '<div class="wrap">';
        $html .= '<h2>Sandbox Theme Options</h2>';
        $html .= '<p class="description">There are currently no options. This is just for demo purposes.</p>';
    $html .= '</div>';
    // Send the markup to the browser
    echo $html;
} // end sandbox_theme_display



//////////////////////////////////////////////////
CUSTOM ADMIN SETTINGS
/////////////////////////////////////////////////
/* ------------------------------------------------------------------------ *
 * Setting Registration
 * ------------------------------------------------------------------------ */
 * Initializes the theme options page by registering the Sections,
 * Fields, and Settings.
 *
 * This function is registered with the 'admin_init' hook.
 */
add_action('admin_init', 'sandbox_initialize_theme_options');
function sandbox_initialize_theme_options() {
 
    // First, we register a section. This is necessary since all future options must belong to one.
    add_settings_section(
        'general_settings_section',         // ID used to identify this section and with which to register options
        'Sandbox Options',                  // Title to be displayed on the administration page
        'sandbox_general_options_callback', // Callback used to render the description of the section
        'general'                           // Page on which to add this section of options
    );
} // end sandbox_initialize_theme_options
 
/**
 * This function provides a simple description for the General Options page. 
 *
 * It is called from the 'sandbox_initialize_theme_options' function by being passed as a parameter
 * in the add_settings_section function.
 */
function sandbox_general_options_callback() {
    echo '<p>Select which areas of content you wish to display.</p>';
} // end sandbox_general_options_callback
/*You can add this section to any of the pages under the Settings menu.
 In the above example, we've passed "general" as the last parameter to the add_settings_section, 
but if you'd like to add it to a different page, you can provide a different page title. 
Here's a reference for each of the Settings pages and their corresponding key:

General, "general"
Writing, "writing"
Reading, "reading"
Discussion, "discussion"
Media, "media"
Privacy, "privacy"
Permalinks, "permalink" */
/* ------------------------------------------------------------------------ *
 * Fields
 * ------------------------------------------------------------------------ */
// Next, we will introduce the fields for toggling the visibility of content elements.
add_settings_field( 
    'show_header',                      // ID used to identify the field throughout the theme
    'Header',                           // The label to the left of the option interface element
    'sandbox_toggle_header_callback',   // The name of the function responsible for rendering the option interface
    'general',                          // The page on which this option will be displayed
    'general_settings_section',         // The name of the section to which this field belongs
    array(                              // The array of arguments to pass to the callback. In this case, just a description.
        'Activate this setting to display the header.'
    )
);
/**
 * This function renders the interface elements for toggling the visibility of the header element.
 * It accepts an array of arguments and expects the first element in the array to be the description
 * to be displayed next to the checkbox.
 */
function sandbox_toggle_header_callback($args) {
    // Note the ID and the name attribute of the element should match that of the ID in the call to add_settings_field
    $html = '<input type="checkbox" id="show_header" name="show_header" value="1" ' . checked(1, get_option('show_header'), false) . '/>';
    // Here, we will take the first argument of the array and add it to a label next to the checkbox
    $html .= '<label for="show_header"> '  . $args[0] . '</label>';  
    echo $html;     
} // end sandbox_toggle_header_callback
// Finally, we register the fields with WordPress
register_setting(
    'general',
    'show_header'
);
/* ------------------------------------------------------------------------ *
 * Using the new settings option in themes
 * ------------------------------------------------------------------------ */
/*What good are options if we can't take advantage of them
 throughout our theme or our plugin? 
We need to be able to read the values in order to properly 
manage our new options.
To do this, we need to use the get_option function*/
//before applying
<div id="header">
    <h1>Sandbox Header</h1>
</div><!-- /#header -->
//after
<?php if(get_option('show_header')) { ?>
    <div id="header">
        <h1>Sandbox Header</h1>
    </div><!-- /#header -->
<?php } 
//you can do the same for content & footer



/* SETTING UP
Develop in a WordPress install.
Turn WP_DEBUG on in wp-config.php file.
Download Debug bar, Query Monitor plugins tools while designing plugins.
Prevent direct access to files: 
	if( !defined( 'ABSPATH' ) ) exit;
*/

//use of bloginfo('description'); = tagline
<head>
	
	<link rel="alternate" 
		type="application/rss+xml" 
		title="<?php bloginfo('name'); ?>" 	//bloginfo('name'); = name of template
		href="<?php bloginfo('rss2_url'); ?>" />
	
	<link rel="pingback" href="<?php bloginfo('pingback_url'); ?>" />
	
	//style.css in mytemplate
	<link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>" 
	type="text/css" />
	
	//wordpress injects
	<?php wp_head(); ?>
		
</head>

//to reference another css stylesheet for a child theme
@import url("../sometheme/style.css");

/*
wordpress
	|__ |/_/ wp-content
		|		|__ |/_/ themes
		|		|		|__ |/_/ mytemplate 
		|		|				|__ style.css
		|		|				|__ index.php
		|		|				|__ functions.php
		|		|				|__ header.php
		|		|				|__ page.php //page template
		|		|
		|		|__ |/_/ plugins				
		|
		|__ |/_/ upgrade
				|__ |/_/ 
*/
	
/* style.css

		Theme Name: My Template
		Theme URI: http://
		Description: Simple wordpress
		Version: 1.0
		Author: Mario
	
	

index.php

functions.php
	
page.php
	page templates unlimited
*/
	
/* PLUGINS
Give every plugin its own folder.
Should have the same file name and folder name.
Name files, functions, and variables logically.
Prefix functions and variable names.
Comment your code.
Group similar functions.
Documentation
	inline documentation (comments and DocBlocks).
	user documentation.
Security
	Confirm user credentials
	Data validation.
	Securing input.
	Escaping output.
	
add_action( <wordpress action to hook>, <custom function>, <priority=10>, <arguments limit=1> )
*/
function mfwp_load_scripts(){ //my first wordpress plugin (mfwp)
	wp_enqueue_style('mfwp-style', plugin_dir_url( __FILE__ ) . 'css/plugin_styles.css');
}
//action hook - when wordpress is loading
add_action('wp_enqueue_scripts', 'mfwp_load_scripts');

//options pages on the admin menu 
function mfwp_add_options_link(){
	add_options_page('My First WordPress Plugin Options','My First Plugin','manage_options','mfwp-options','mfwp_options_page');
}
add_action('admin_menu', 'mfwp_add_options_link');
/*	
wp-content/plugins/
	>make folder /addimage/
	> make php file in addimage folder
	/addimage.php
*/

/* ACTION HOOKS 
action hooks execute when event occurs 
admin_head - head for dashboard
admin_init - when dashboard has loaded
comment_post - when new comment is created
create_category - whe category is created
init - when wordpress has loaded the website
publish_post - when a new post is published
switch_theme - when the theme is changed
user_register - when a new user is registered
wp_footer - occurs in the footer
wp_head - occurs in the head
*/
//1 Define the action hook 
function my_custom_action(){
	do_action( 'my_custom_action', 1 );
}
//2 Attach a function to the action hook 
add_action( 'my_custom_action', 'my_custom_function' );
function my_custom_function(){
	echo "This is a custom action.";
}
//3 Call the action hook 
my_custom_action();

/* REGISTER ACTIVATION HOOKS 
register_activation_hook( __FILE__, 'custom_plugin_prefix_custom_function' );
__FILE__ point to the right location
register_deactivation_hook( __FILE__, 'custom_plugin_prefix_custom_function' );

To uninstall:
register_uninstall_hook( string $file, callable $callback )
*/

/* FILTERS
Filters modify data 
filter hooks change content before displaying and saving to database
comment_text changes comments before display
get_categories - changes category list
the_content - changes the content of a post or page
the_content_rss - changes content of posts in RSS feeds
the_permalink - changes the permalink
the_title - the title of posts and pages
wp_title - text in the title tag
add_filter( <action to hook>, <custom function>, <priority=10>, <argument limit=1> )
*/
//example filter1
add_filter( 'add_more_shrimp', 'moreShrimpHere' );
function moreShrimpHere( $shrimps ){
	$shrimps[] = 'bbq shrimp';
	return $shrimps;
}
/*using filter1 
has_filter( <filter> ) checks if the filter exists
apply_filters( <filters> ) applies the passed filters */
function listAllShrimp(){
	$list = "";
	$shrimps = array( 'pineapple shrimp', 'lemon shrimp', 'coconut shrimp', 'pepper shrimp' );
	if( has_filter( 'add_more_shrimp' ) ){
		$shrimps = apply_filters( 'add_more_shrimp', $shrimps )
	}
	foreach( $shrimps as $shrimp ){
		$list .= $shrimp;
	}
	return $list;
}

/* CUSTOM POST TYPES
/plugins/customposttypes.php
register_post_type( string $name_of_post_type, array of arguments ) */
function myCustomPostTypes(){
     $args=array(
          /*support is the editable fields available for the user
          on the admin cms side*/
          'supports' =>array('title','editor','thumbnail'
          ,'author','excerpt','comments','custom_fields'),
          /*editable classification fields available for the user
           category allows for hirearchical*/
          'taxonomies'=>array('category','post_tag'),
          ...);
	register_post_type( 'recipes', $args );
	//add as many post types as you need
	register_post_type('coupons',$args);
}
add_action( 'init', 'myCustomPostTypes' );
////////////////////////////////////////////////////////////
/* ////TAXONAMIES
////////////////////////////////////////////////////////////
on same file /plugins/customposttypes.php
classify and organize data such as Category and Tag 
register_taxonamy( $name_of_taxonamy, $name_of_post_type_to_use_this_taxonamy_on, array of arguments )
*/
function register_recipe_taxonomy(){
	register_taxonomy( 'recipe-type', 'recipe', $args );
}
add_action( 'init', 'register_recipe_taxonomy' ); //hooking to init action 

//CHILD THEME for post types
//theme/childtheme/style.css
/*Theme name: Child Theme
...
*/
//copy single.php
paste into /theme/childtheme/single-mychildtheme.php
//single.php contains the framework
...content-mychildtheme.php
//content.php contains the content
//in single-mychildtheme.php change
get_template_part('content','mychildtheme');
//it will pull the contents from content-mychildtheme.php
//to add links
get_the_term_list(post $id,taxonomy $taxonomy, html $before,seperator $sep, html $after)

/* ROLES Administrator, Editor, Author, Contributor, Subscriber
add_role() - allows you to create custom roles
add_cap(), remove_cap() - allows you to set|remove capabilities
current_user_can() - check user capabilites 
user_can() - check a particular user capabilites */

/* SHORTCODES
[caption] - wrap caption around content 
[gallery] - show image galleries
[audio] - embed and play audo files 
[video] - embed and play video files 
[playlist] - display collection of audio or video files 
[embed] - wrap embedded items

add_shortcode( $name_of_shortcode, $function ) */
//basic
function make_a_button(){
	return '<a href="http://someurl.com/" class="button">Click me</a>';
}
add_shortcode( 'my_button', 'make_my_button' ); // [my_button] 
//customized by user 
function make_a_button( $atts, $content = null ){
	return '<a href="http://someurl.com/" class="button">' . $content . '</a>';
}
add_shortcode( 'my_button', 'make_my_button' ); // [my_button] $content [/my_button]



/* PLUGIN HEADER
Plugin Name: Add Image
Plugin URL: http://yourwebsite.com
Version: 1.0
Author: Mario
Author URL: http://yourwebsite.com
Description: This plugin adds an image at the beginning of every post
*/
//Exit if accessed directly.
if( !defined( 'ABSPATH' ) ) exit;
/*******************
* GLOBAL VARS
********************/
$mfwp_prefix = "mfwp_";
$mfwp_plugin_name = "My First Wordpress Plugin";
/*******************
* INCLUDES
********************/
include("includes/scripts.php"); // this controls all JS/CSS
include("includes/data-processing.php"); //this controls all saving of data
include("includes/display-functions.php"); //custom made file by user
function addImage($post){
	$img_w_text = "<img src=\"url\" alt=\"my image\" />";
	$img_w_text .= $post;
	return 	$img_w_text;
}
//data from server passes through the addImage function after the_content function
add_filter("the_content","addImage");

//Another example
class my_widget extends WP_Widget{
	function my_widget(){ //constructor
		$widget_options = array(
								'classname' => 'my_widget',
								'description' => __('Display Links to Facebook, Twitter, and RSS')
								);
		parent::WP_Widget('my_widget', 'Social Network Links', $widget_options );
	}
	function widget($args, $instance){//instance is the widget itself
		extract( $args, EXTR_SKIP );
		$title = ( $instance['title'] ) ? $instance['title'] : 'Follow Me';
		$facebook = ( $instance['facebook'] ) ? $instance['facebook'] : 'Follow Me';
		$twitter = ( $instance['twitter'] ) ? $instance['twitter'] : 'Follow Me';
	}
	function update($new_instance, $old_instance){}
	function form($instance){}
}
function my_widget_init(){
	register_widget('my_widget');
}
add_action('widgets_init', 'my_widget_init');











	
	